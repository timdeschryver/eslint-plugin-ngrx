import { writeFileSync } from 'fs'
import { join } from 'path'
import { format, resolveConfig } from 'prettier'
import type { NgRxRuleModule } from '../src/rule-creator'
import { rules } from '../src/rules'

const prettierConfig = resolveConfig.sync(__dirname)

const RULE_NAME_PREFIX = 'ngrx/'
const CONFIG_DIRECTORY = './src/configs/'

const getRules = (
  predicate: (rule: NgRxRuleModule<[], string>) => boolean,
  setting = (rule: NgRxRuleModule<[], string>) =>
    rule.meta.docs?.recommended || 'warn',
) =>
  Object.entries(rules).reduce<Record<string, string>>(
    (rules, [ruleName, rule]) => {
      if (predicate(rule)) {
        rules[`${RULE_NAME_PREFIX}${ruleName}`] = setting(rule)
      }
      return rules
    },
    {},
  )

writeConfig('recommended', {
  ...getRules(
    (rule) =>
      !!rule.meta.docs?.recommended && !rule.meta.docs?.requiresTypeChecking,
  ),
})

writeConfig('all', {
  ...getRules((rule) => !rule.meta.docs?.requiresTypeChecking),
})

writeConfig('strict', {
  ...getRules(
    (rule) => !rule.meta.docs?.requiresTypeChecking,
    () => 'error',
  ),
})

writeConfig('recommended-requiring-type-checking', {
  ...getRules((rule) => !!rule.meta.docs?.recommended),
})

writeConfig('all-requiring-type-checking', {
  ...getRules(() => true),
})

writeConfig('strict-requiring-type-checking', {
  ...getRules(
    () => true,
    () => 'error',
  ),
})

writeConfig(
  'store',
  {
    ...getRules(
      (rule) =>
        rule.meta.ngrxModule === 'store' &&
        !rule.meta.docs?.requiresTypeChecking,
    ),
  },
  ['ngrx'],
  null,
)

writeConfig(
  'store-strict',
  {
    ...getRules(
      (rule) =>
        rule.meta.ngrxModule === 'store' &&
        !rule.meta.docs?.requiresTypeChecking,
      () => 'error',
    ),
  },
  ['ngrx'],
  null,
)

writeConfig(
  'effects',
  {
    ...getRules(
      (rule) =>
        rule.meta.ngrxModule === 'effects' &&
        !rule.meta.docs?.requiresTypeChecking,
    ),
  },
  ['ngrx'],
)

writeConfig(
  'effects-strict',
  {
    ...getRules(
      (rule) =>
        rule.meta.ngrxModule === 'effects' &&
        !rule.meta.docs?.requiresTypeChecking,
      () => 'error',
    ),
  },
  ['ngrx'],
)

writeConfig(
  'effects-requiring-type-checking',
  {
    ...getRules((rule) => rule.meta.ngrxModule === 'effects'),
  },
  ['ngrx'],
)

writeConfig(
  'effects-strict-requiring-type-checking',
  {
    ...getRules(
      (rule) => rule.meta.ngrxModule === 'effects',
      () => 'error',
    ),
  },
  ['ngrx'],
)

writeConfig(
  'component-store',
  {
    ...getRules(
      (rule) =>
        rule.meta.ngrxModule === 'component-store' &&
        !rule.meta.docs?.requiresTypeChecking,
    ),
  },
  ['ngrx'],
  null,
)

writeConfig(
  'component-store-strict',
  {
    ...getRules(
      (rule) =>
        rule.meta.ngrxModule === 'component-store' &&
        !rule.meta.docs?.requiresTypeChecking,
      () => 'error',
    ),
  },
  ['ngrx'],
  null,
)

function writeConfig(
  configName:
    | 'all'
    | 'recommended'
    | 'strict'
    | 'all-requiring-type-checking'
    | 'recommended-requiring-type-checking'
    | 'strict-requiring-type-checking'
    | 'store'
    | 'store-strict'
    | 'effects'
    | 'effects-requiring-type-checking'
    | 'effects-strict'
    | 'effects-strict-requiring-type-checking'
    | 'component-store'
    | 'component-store-strict',
  configRules: Record<string, string>,
  plugins = ['ngrx'],
  parserOptions: null | Record<string, string | number> = {
    ecmaVersion: 2020,
    sourceType: 'module',
    project: './tsconfig.json',
  },
) {
  const code = `
/**
 * DO NOT EDIT
 *
 * This file is automatically generated (as a pre-commit step)
 */

export = {
  parser: "@typescript-eslint/parser",
  ${parserOptions ? `parserOptions: ${JSON.stringify(parserOptions)},` : ''}
  plugins: ${JSON.stringify(plugins)},
  rules: ${JSON.stringify(configRules)},
}
`
  const config = format(code, {
    parser: 'typescript',
    ...prettierConfig,
  })
  writeFileSync(join(CONFIG_DIRECTORY, `${configName}.ts`), config)
}
